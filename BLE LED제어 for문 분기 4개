#include <BLEDevice.h>
#include <BLEUtils.h>
#include <BLEServer.h>
#define SERVICE_UUID        "4fafc201-1fb5-459e-8fcc-c5c9c331914b"
#define CHARACTERISTIC_UUID "beb5483e-36e1-4688-b7f5-ea07361b26a8"
int led = 2;
class MyCallbacks : public BLECharacteristicCallbacks { // 스마트폰에서 데이터 전송시 callback
    void onWrite(BLECharacteristic* pCharacteristic) {
        std::string value = pCharacteristic->getValue();
       
        if (value.length() > 0 && value.length() < 2) {  // 길이가 1이면
            Serial.print("분기 1 : ");
            for (int i = 0; i < value.length(); i++)  // 모든 길이가
            Serial.print(value[i]);  // 그냥 출력된다
            Serial.println();
            digitalWrite(led, LOW);  // LED 끄다
        }
        if (value.length() > 2 && value.length() < 3) {  // 길이가 3~4개이면
            Serial.print("분기 2 : ");
            for (int i = 2; i < value.length(); i++)  // 길이를 -2한 후에
            Serial.print(value[i]);  // 앞에 2개 없애고 출력
            Serial.println();
            digitalWrite(led, HIGH);  //  0.5초 시간차로 2회 깜빡임
            delay(500);
            digitalWrite(led, LOW);
            delay(500);
            digitalWrite(led, HIGH);
            delay(500);
            digitalWrite(led, LOW);
        }
        if (value.length() > 3 && value.length() < 5) {  
            Serial.print("분기 3 : ");
            for (int i = 2; i < value.length(); i++)  // 길이를 -2한 후에
            Serial.print(value[i]);  // 앞에 2개 없애고 출력
            Serial.println();
            digitalWrite(led, HIGH);  //  10초 후 꺼짐
            delay(10000);
            digitalWrite(led, LOW);
            delay(500);
        }
        if (value.length() > 5) {  // 길이가 6이상이면
            Serial.print("분기 4 : ");
            for (int i = 5; i < value.length(); i++) // 길이를 -5한 후에
            Serial.print(value[i]);  // 앞에 5개 없애고 출력
            Serial.println();
            digitalWrite(led, HIGH);  // LED 켜다
        }
    }
};
void setup() {
    pinMode(led, OUTPUT);
    //Serial.begin(115200);
    Serial.begin(9600);
    BLEDevice::init("MyESP32"); // 디바이스 이름
    BLEServer* pServer = BLEDevice::createServer();
    BLEService* pService = pServer->createService(SERVICE_UUID);
    BLECharacteristic* pCharacteristic = pService->createCharacteristic(
        CHARACTERISTIC_UUID,
        BLECharacteristic::PROPERTY_READ |
        BLECharacteristic::PROPERTY_WRITE
    );
    pCharacteristic->setCallbacks(new MyCallbacks());
    pCharacteristic->setValue("Hello World");
    pService->start();
    BLEAdvertising* pAdvertising = pServer->getAdvertising();
    pAdvertising->start();
}
void loop() {
    // put your main code here, to run repeatedly:
    //delay(2000);
}
