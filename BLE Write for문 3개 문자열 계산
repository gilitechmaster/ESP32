#include <BLEDevice.h>
#include <BLEUtils.h>
#include <BLEServer.h>
#define SERVICE_UUID        "4fafc201-1fb5-459e-8fcc-c5c9c331914b"
#define CHARACTERISTIC_UUID "beb5483e-36e1-4688-b7f5-ea07361b26a8"

class MyCallbacks : public BLECharacteristicCallbacks { // 스마트폰에서 데이터 전송시 callback
    void onWrite(BLECharacteristic* pCharacteristic) {
        std::string value = pCharacteristic->getValue();
       
        if (value.length() > 0) {
            Serial.print("New value1: ");
            for (int i = 0; i < value.length(); i++)  // 모든 길이가 출력된다
            Serial.print(value[i]);
            Serial.println();
        }
        if (value.length() > 0) {
            Serial.print("New value2: ");
            for (int i = 2; i < value.length(); i++)  // 길이를 -2한 후에 출력한다
            Serial.print(value[i]);
            Serial.println();
        }
        if (value.length() > 0) {
            Serial.print("New value3: ");
            for (int i = 5; i < value.length(); i++) // 길이를 -5한 후에 출력한다
            Serial.print(value[i]);
            Serial.println();
            Serial.println();
        }
    }
};
void setup() {
    Serial.begin(115200);
    BLEDevice::init("MyESP32"); // 디바이스 이름
    BLEServer* pServer = BLEDevice::createServer();
    BLEService* pService = pServer->createService(SERVICE_UUID);
    BLECharacteristic* pCharacteristic = pService->createCharacteristic(
        CHARACTERISTIC_UUID,
        BLECharacteristic::PROPERTY_READ |
        BLECharacteristic::PROPERTY_WRITE
    );
    pCharacteristic->setCallbacks(new MyCallbacks());
    pCharacteristic->setValue("Hello World");
    pService->start();
    BLEAdvertising* pAdvertising = pServer->getAdvertising();
    pAdvertising->start();
}
void loop() {
    // put your main code here, to run repeatedly:
    //delay(2000);
}
