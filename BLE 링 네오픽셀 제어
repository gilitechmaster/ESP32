#include<Adafruit_NeoPixel.h>
#define PIN 18
#define NUM_LEDS 16 // 최대 16개까지 켜짐, 링형 네오픽셀 16bit
Adafruit_NeoPixel ring = Adafruit_NeoPixel(NUM_LEDS, PIN, NEO_GRB + NEO_KHZ800);

#include <BLEDevice.h>
#include <BLEUtils.h>
#include <BLEServer.h>
#define SERVICE_UUID        "4fafc201-1fb5-459e-8fcc-c5c9c331914b"
#define CHARACTERISTIC_UUID "beb5483e-36e1-4688-b7f5-ea07361b26a8"
//int led = 18;
class MyCallbacks : public BLECharacteristicCallbacks { // 스마트폰에서 데이터 전송시 callback
    void onWrite(BLECharacteristic* pCharacteristic) {
      std::string value = pCharacteristic->getValue();

      if (value.length() == 1) {  // 길이가 1이면
        Serial.print("끄기");
        for (int i = 0; i < value.length(); i++)  // 모든 길이가
          Serial.print(value[i]);  // 그냥 출력된다
        Serial.println();
        for (int i = 0; i < 16; i++) // 네오픽셀 1~16번까지
        {
          ring.setPixelColor(i, 0, 0, 0); // 모두 off
        }
        ring.show();
        delay(10);
      }

      if (value.length() == 2) {  // 길이가 2이면
        Serial.print("흰색 켜기");
        for (int i = 2; i < value.length(); i++)  // 길이를 -2한 후에
          Serial.print(value[i]);  // 앞에 2개 없애고 출력
        Serial.println();
        for (int i = 0; i < 16; i++) // 네오픽셀 1~16번까지
        {
          //rgb가 모두 동일하면 흰색 출력된다.
          //ring.setPixelColor(i, 10, 10, 10); //0.1mA
          //0.1mA * 16bit = 1.6mA가 맞을듯 싶다.
          
          //ring.setPixelColor(i, 20, 20, 20); //0.19mA
          //ring.setPixelColor(i, 30, 30, 30); //0.28mA
          //ring.setPixelColor(i, 40, 40, 40); //0.39mA
          //ring.setPixelColor(i, 150, 150, 150); //1.5mA
          ring.setPixelColor(i, 180, 180, 180); //1.8mA
          //LED처럼 255까지 올릴필요는 없어보이므로 180으로 한다.
        }
        ring.show();
        delay(10);
      }

      //https://en.wikipedia.org/wiki/Web_colors
      //RGB 255값에 따른 색상 분류표

      if (value.length() == 3) {  // 길이가 3이면
        Serial.print("꽃무늬화이트 켜기");
        for (int i = 0; i < value.length(); i++)  // 모든 길이가
          Serial.print(value[i]);  // 그냥 출력된다
        Serial.println();
        for (int i = 0; i < 16; i++) // 네오픽셀 1~16번까지
        {
          ring.setPixelColor(i, 180, 170, 140); //
        }
        ring.show();
        delay(10);
      }
    }
};

void setup() {

  Serial.begin(9600);
  ring.begin();
  ring.show();

  BLEDevice::init("MyESP32"); // 디바이스 이름
  BLEServer* pServer = BLEDevice::createServer();
  BLEService* pService = pServer->createService(SERVICE_UUID);
  BLECharacteristic* pCharacteristic = pService->createCharacteristic(
                                         CHARACTERISTIC_UUID,
                                         BLECharacteristic::PROPERTY_READ |
                                         BLECharacteristic::PROPERTY_WRITE
                                       );
  pCharacteristic->setCallbacks(new MyCallbacks());
  pCharacteristic->setValue("Hello World");
  pService->start();
  BLEAdvertising* pAdvertising = pServer->getAdvertising();
  pAdvertising->start();

}

void loop() {

}
